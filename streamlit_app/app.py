import streamlit as st
import pandas as pd
import joblib
import matplotlib.pyplot as plt # Although not directly used for displaying plots, good to include if plots were generated by this script
import seaborn as sns # Same as above
import os # Import the os module for path manipulation

# Set page config for a wide layout and a custom title
st.set_page_config(page_title="Shopper Spectrum Dashboard", layout="wide")

# Get the directory of the current script (app.py)
current_dir = os.path.dirname(__file__)
# Construct the absolute path to the 'visuals' directory
visuals_dir = os.path.join(current_dir, '..', 'visuals')
# Construct the absolute path to the 'models' directory
models_dir = os.path.join(current_dir, '..', 'models')
# Construct the absolute path to the 'data' directory (for product recommendations)
data_dir = os.path.join(current_dir, '..', 'data')


# App title and description
st.title("Shopper Spectrum: Customer Segmentation and Product Recommendations")
st.markdown("Explore customer behavior, perform visual analysis, and predict customer segments using RFM modeling and collaborative filtering.")

# ---------------------
# Dashboard Navigation
# ---------------------
# Using a sidebar radio button for navigation between sections
menu = st.sidebar.radio("Navigation", ["EDA Visualizations", "Predict Customer Segment", "Product Recommendation"])

# -----------------------------------
# EDA Visualizations Section
# -----------------------------------
if menu == "EDA Visualizations":
    st.header("Phase 2: Exploratory Data Analysis (EDA) Visualizations")
    st.markdown("Dive into key insights from customer transaction data.")

    # Univariate Analysis
    st.subheader("Univariate Analysis")
    col1, col2 = st.columns(2) # Create two columns for layout
    with col1:
        st.image(os.path.join(visuals_dir, "quantity_distribution_fixed.png"), caption="Chart 1: Distribution of Quantity Purchased (Quantity < 50)")
        st.image(os.path.join(visuals_dir, "top_transaction_countries.png"), caption="Chart 3: Top 10 Countries by Transaction Volume (Log Scale)")
        st.image(os.path.join(visuals_dir, "top_10_products.png"), caption="Chart 4: Top 10 Best-Selling Products")
    with col2:
        st.image(os.path.join(visuals_dir, "unit_price_distribution_zoomed.png"), caption="Chart 2: Distribution of Unit Prices (UnitPrice < Â£50)")
        st.image(os.path.join(visuals_dir, "monthly_sales_trend.png"), caption="Chart 5: Monthly Sales Trend")

    # Bivariate Analysis
    st.subheader("Bivariate Analysis")
    col3, col4 = st.columns(2) # Create two columns for layout
    with col3:
        st.image(os.path.join(visuals_dir, "top_revenue_countries_log.png"), caption="Chart 6: Top 10 Countries by Revenue (Log Scale)")
        st.image(os.path.join(visuals_dir, "frequency_distribution.png"), caption="Chart 8: Frequency Distribution")
        st.image(os.path.join(visuals_dir, "monetary_distribution.png"), caption="Chart 9: Monetary Distribution")
    with col4:
        # Note: 'customer_clusters.png' was named 'customer_cluster_profiles.png' in our previous steps
        # Ensure the filename matches the actual saved file name in your 'visuals' directory.
        st.image(os.path.join(visuals_dir, "customer_clusters.png"), caption="Chart 7: Customer Cluster Profiles based on RFM Metrics")
        st.image(os.path.join(visuals_dir, "rfm_correlation_heatmap.png"), caption="Chart 10: Correlation Heatmap of RFM Features")

    # Multivariate Analysis
    st.subheader("Multivariate Analysis")
    col5, col6 = st.columns(2) # Create two columns for layout
    with col5:
        st.image(os.path.join(visuals_dir, "top_loyal_customers.png"), caption="Chart 11: Top 10 Loyal Customers by Frequency")
        st.image(os.path.join(visuals_dir, "weekly_sales_trend.png"), caption="Chart 13: Weekly Sales Trend")
        # Assuming 'cancelled_orders.png' is available in your visuals folder
        st.image(os.path.join(visuals_dir, "cancelled_orders.png"), caption="Chart 15: Cancelled vs Completed Orders")
    with col6:
        st.image(os.path.join(visuals_dir, "sales_by_hour.png"), caption="Chart 12: Sales by Hour of the Day")
        st.image(os.path.join(visuals_dir, "average_basket_size.png"), caption="Chart 14: Average Basket Size Distribution")

# -----------------------------------
# Predict Customer Segment Section
# -----------------------------------
if menu == "Predict Customer Segment":
    st.header("Phase 4: Predict Customer Segment")
    st.markdown("Provide customer RFM data below to predict which segment they belong to.")

    # Input fields for Recency, Frequency, and Monetary values
    recency = st.number_input("Recency (days since last purchase)", min_value=0, value=30)
    frequency = st.number_input("Frequency (number of purchases)", min_value=0, value=5)
    monetary = st.number_input("Monetary (total spend)", min_value=0.0, value=500.0)

    if st.button("Predict Segment"):
        try:
            # Load the pre-trained KMeans model and StandardScaler
            # Ensure these paths are correct relative to where app.py is run
            model_path = os.path.join(models_dir, "kmeans_model.joblib")
            scaler_path = os.path.join(models_dir, "rfm_scaler.joblib")


            if not os.path.exists(model_path):
                st.error(f"Error: Model file not found at {model_path}. Please ensure it's saved correctly.")
            if not os.path.exists(scaler_path):
                st.error(f"Error: Scaler file not found at {scaler_path}. Please ensure it's saved correctly.")

            model = joblib.load(model_path)
            scaler = joblib.load(scaler_path)

            # Create a DataFrame from the input values
            input_df = pd.DataFrame([[recency, frequency, monetary]], columns=['Recency', 'Frequency', 'Monetary'])

            # Scale the input data using the loaded scaler
            input_scaled = scaler.transform(input_df)

            # Make a prediction
            prediction = model.predict(input_scaled)[0]

            # Display the prediction
            st.success(f"Predicted Segment Cluster: **{prediction}**")

            # Optional: Add interpretation based on cluster profiles (you'd need to define these)
            cluster_interpretations = {
                0: "Occasional Shopper (Low Frequency, Low Monetary, Older Recency)",
                1: "At-Risk Customer (High Recency, Low Frequency, Low Monetary)",
                2: "High-Value Customer (Low Recency, High Frequency, High Monetary)",
                3: "Regular Customer (Medium Frequency, Medium Monetary)"
            }
            if prediction in cluster_interpretations:
                st.info(f"This customer is likely an: **{cluster_interpretations[prediction]}**")


        except Exception as e:
            st.error("An error occurred during prediction. Please check your model and scaler files.")
            st.code(str(e))

# -----------------------------------
# Product Recommendation Section
# -----------------------------------
if menu == "Product Recommendation":
    st.header("Product Recommendation Engine")
    st.markdown("Enter a product name to get recommendations for similar items.")

    # Input for product name
    product_name_input = st.text_input("Enter Product Name (e.g., WHITE HANGING HEART T-LIGHT HOLDER)")

    if st.button("Get Recommendations"):
        try:
            # Load the pre-processed data and similarity matrix
            # Ensure these paths are correct relative to where app.py is run
            df_path = os.path.join(data_dir, "cleaned_retail_data.csv") # Assuming this is your main data file
            similarity_matrix_path = os.path.join(models_dir, "product_similarity.pkl") # Assuming you saved this

            if not os.path.exists(df_path):
                st.error(f"Error: Data file not found at {df_path}. Please ensure it's present.")
            if not os.path.exists(similarity_matrix_path):
                st.error(f"Error: Similarity matrix file not found at {similarity_matrix_path}. Please ensure it's saved correctly.")

            # Load data and similarity matrix
            df_rec = pd.read_csv(df_path)
            df_rec['Description'] = df_rec['Description'].str.strip() # Clean descriptions
            item_similarity_matrix = joblib.load(similarity_matrix_path)

            # Function to get recommendations
            def get_recommendations(product_description, similarity_matrix, df_data, num_recommendations=5):
                # Ensure the product description exists in the similarity matrix index
                if product_description not in similarity_matrix.index:
                    return f"Product '{product_description}' not found in the recommendation system. Please check the spelling or try another product."

                # Get similarity scores for the given product
                sim_scores = similarity_matrix[product_description]

                # Sort products by similarity score in descending order
                sim_scores = sim_scores.sort_values(ascending=False)

                # Get the top N similar products (excluding the product itself)
                top_similar_products = sim_scores.index[1:num_recommendations+1] # Skip the first one (itself)

                return top_similar_products.tolist()

            # Get and display recommendations
            recommendations = get_recommendations(product_name_input.upper(), item_similarity_matrix, df_rec) # Convert to upper to match common product descriptions

            if isinstance(recommendations, str):
                st.warning(recommendations) # Display warning if product not found
            elif recommendations:
                st.subheader("Recommended Products:")
                for i, product in enumerate(recommendations):
                    st.write(f"{i+1}. {product}")
            else:
                st.info("No recommendations found for this product.")

        except Exception as e:
            st.error("An error occurred during recommendation. Please ensure your data and similarity matrix files are correct.")
            st.code(str(e))

uploaded_file = st.sidebar.file_uploader("Upload Transaction Data (.csv)", type=["csv"])
if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.success("File uploaded successfully!")
